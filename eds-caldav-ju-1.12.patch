diff -Naur -x '*.in' -x '*.m4' -x 'config.*' -x configure -x libtool -x stamp-h1 orig/evolution-data-server-1.12.1/calendar/backends/caldav/e-cal-backend-caldav.c evolution-data-server-1.12.1/calendar/backends/caldav/e-cal-backend-caldav.c
--- orig/evolution-data-server-1.12.1/calendar/backends/caldav/e-cal-backend-caldav.c	2007-10-12 09:29:51.000000000 +0300
+++ evolution-data-server-1.12.1/calendar/backends/caldav/e-cal-backend-caldav.c	2007-11-28 10:57:02.000000000 +0200
@@ -56,7 +56,8 @@
 
 	SLAVE_SHOULD_SLEEP,
 	SLAVE_SHOULD_WORK,
-	SLAVE_SHOULD_DIE
+	SLAVE_SHOULD_DIE, 
+	SLAVE_SHOULD_SYNC_NOW
 
 } SlaveCommand;
 
@@ -111,6 +112,7 @@
 
 	/* object cleanup */
 	gboolean disposed;
+
 };
 
 /* ************************************************************************* */
@@ -791,6 +793,8 @@
 	guint status;
 
 	char *cdata;
+
+	ECalComponent *comp;
 };
 
 static void
@@ -905,12 +909,8 @@
 	cbdav = E_CAL_BACKEND_CALDAV (data);	
 	priv = E_CAL_BACKEND_CALDAV_GET_PRIVATE (cbdav);
 
-	*username = priv->username;
-	*password = priv->password;
-	
-	priv->username = NULL;
-	priv->password = NULL;
-
+	*username = g_strdup(priv->username);
+	*password = g_strdup(priv->password);
 }
 
 static void
@@ -928,11 +928,18 @@
 	cbdav = E_CAL_BACKEND_CALDAV (data);	
 	priv = E_CAL_BACKEND_CALDAV_GET_PRIVATE (cbdav);
 
-	*username = priv->username;
-	*password = priv->password;
-	
-	priv->username = NULL;
-	priv->password = NULL;
+        if (priv->need_auth) {
+  		*username = g_strdup(priv->username);
+		*password = g_strdup(priv->password);
+		/* try only once ... */
+		priv->need_auth = FALSE;
+	} else {
+ 		*username = NULL;
+		*password = NULL;
+  		/* notification for the client to re-auth, but how ??? */
+		
+	        e_cal_backend_notify_auth_required(cbdav);	
+	}
 }
 
 static gint 
@@ -1031,12 +1038,14 @@
 	gboolean                   calendar_access;
 	gboolean                   put_allowed;
 	gboolean                   delete_allowed;
+	char 			   *uri;
 	
 	priv = E_CAL_BACKEND_CALDAV_GET_PRIVATE (cbdav);
 
 	/* FIXME: setup text_uri */
-	
-	message = soup_message_new (SOUP_METHOD_OPTIONS, priv->uri);
+	uri = caldav_generate_uri (cbdav, NULL);
+	message = soup_message_new (SOUP_METHOD_OPTIONS, uri);
+	g_free (uri);
 	soup_message_add_header (message->request_headers, 
 				 "User-Agent", "Evolution/" VERSION);
 
@@ -1109,7 +1118,8 @@
 	xmlNsPtr             nsdav;
 	xmlNsPtr             nscd;
 	gboolean             result;
-       
+   	char                *uri;
+    
 	priv = E_CAL_BACKEND_CALDAV_GET_PRIVATE (cbdav);
 	
 	/* Maybe we should just do a g_strdup_printf here? */	
@@ -1139,7 +1149,10 @@
 	xmlOutputBufferFlush (buf);
 
 	/* Prepare the soup message */
-	message = soup_message_new ("REPORT", priv->uri);
+	uri = caldav_generate_uri (cbdav, NULL);
+	message = soup_message_new ("REPORT", uri);
+	g_free (uri);
+	
 	soup_message_add_header (message->request_headers, 
 				 "User-Agent", "Evolution/" VERSION);
 	soup_message_add_header (message->request_headers, 
@@ -1161,14 +1174,17 @@
 	xmlFreeDoc (doc);
 
 	/* Check the result */
-	if (message->status_code != 207) {
-		g_warning ("Sever did not response with 207\n");
+	if (message->status_code == 404) {
+		result = TRUE;
+		*objs = NULL;
+		*len = 0;
+	} else if (message->status_code != 207) {
+		g_warning ("Server did not response with 207\n");
 		return FALSE;
+	} else {
+		/* Parse the response body */
+		result = parse_report_response (message, objs, len);
 	}
-	
-	/* Parse the response body */
-	result = parse_report_response (message, objs, len);
-
 	g_object_unref (message);
 	return result;
 }
@@ -1422,6 +1438,7 @@
 				   g_str_equal (_tag1 != NULL ? _tag1 : "",  \
 					        _tag2 != NULL ? _tag2 : "")) 
 
+#if 0
 static void
 synchronize_cache (ECalBackendCalDAV *cbdav)
 {
@@ -1523,6 +1540,105 @@
 	g_list_free (cobjs);
 	
 }
+#endif
+
+static void
+synchronize_cache (ECalBackendCalDAV *cbdav)
+{
+	ECalBackendCalDAVPrivate *priv;
+	ECalBackendCache         *bcache;
+	CalDAVObject             *sobjs;
+	CalDAVObject             *object;
+	GHashTable               *hindex;
+	GList                    *cobjs;
+	GList                    *citer;
+	gboolean		  res;
+	int			  len;
+	int                       i;
+	
+	priv   = E_CAL_BACKEND_CALDAV_GET_PRIVATE (cbdav);	
+	bcache = priv->cache;
+	len    = 0;
+	sobjs  = NULL;
+	
+	res = caldav_server_list_objects (cbdav, &sobjs, &len);
+	
+	if (res == FALSE) {
+		/* FIXME: bloek! */
+		g_warning ("Could not synch server BLehh!");
+		return;
+	}
+	hindex = g_hash_table_new (g_str_hash, g_str_equal);
+
+        for (i = 0, object = sobjs; i < len; i++, object++) 
+	 	g_hash_table_insert (hindex, (gpointer) object->href, object);
+ 
+	cobjs = e_cal_backend_cache_get_components (bcache);
+
+	/* look for removed components and add appropriate links 
+	   do this in two phases because of e.g. renaming of a file name
+	   i.e. removal doesn't appear after adding 
+	*/	
+	for (citer = cobjs; citer; citer = g_list_next (citer)) {
+		ECalComponent *ccomp = E_CAL_COMPONENT (citer->data);
+		const char *href;	
+	     
+		href = e_cal_component_get_href (ccomp);
+		
+		if (href == NULL) {
+			g_warning ("href of object NULL :(");
+			continue;
+		}
+
+		object = g_hash_table_lookup (hindex, href);
+
+		if (object != NULL) {
+			object->comp = ccomp;
+		} else {                 
+               		const char *uid;
+		
+			e_cal_component_get_uid (ccomp, &uid);
+
+			if (e_cal_backend_cache_remove_component (bcache, uid, NULL) && 
+			    priv->report_changes) {
+				char *str = e_cal_component_get_as_string (ccomp);
+				ECalComponentId *id = e_cal_component_get_id (ccomp);
+			       	
+				e_cal_backend_notify_object_removed (E_CAL_BACKEND (cbdav), 
+								     id, str, NULL);
+				e_cal_component_free_id (id);
+				g_free (str);
+			}
+			g_object_unref (ccomp);
+                }           
+	}
+  	
+	/* see if we have to upate or add some objects */
+	for (i = 0, object = sobjs; i < len; i++, object++) {
+		const char *etag = NULL;
+
+		if (object->status != 200) {
+			/* just continue here, so that the object
+			   doesn't show up of change
+			   403 response ??? is one possibility
+			 */
+			caldav_object_free (object, FALSE);
+			continue;
+		}
+		
+		if (object->comp != NULL) 
+			etag = e_cal_component_get_etag (object->comp);	
+
+		if (!etag || !etags_match (etag, object->etag)) 
+			synchronize_object (cbdav, object, object->comp);
+
+		caldav_object_free (object, FALSE);
+	}
+
+	g_hash_table_destroy (hindex);
+	g_list_free (cobjs);
+}
+
 
 /* ************************************************************************* */
 static gpointer 
@@ -1566,6 +1682,7 @@
 	return NULL;	
 }
 
+
 /* ************************************************************************* */
 /* ********** ECalBackendSync virtual function implementation *************  */
 
@@ -1632,6 +1749,7 @@
 	return GNOME_Evolution_Calendar_Success;
 }
 
+
 static ECalBackendSyncStatus
 initialize_backend (ECalBackendCalDAV *cbdav)
 {	
@@ -1678,7 +1796,7 @@
 
 	} else {
 
-		priv->uri = g_strdup (uri);
+		priv->uri = g_strdup_printf ("%s", uri);
 	} 
 
 	/* remove trailing slashes */
@@ -1690,7 +1808,7 @@
 			break;
 		}
 	}
-
+	
 	if (priv->cache == NULL) {
 		priv->cache = e_cal_backend_cache_new (priv->uri, E_CAL_SOURCE_TYPE_EVENT);
 
@@ -1750,10 +1868,10 @@
 			g_mutex_unlock (priv->lock);
 			return GNOME_Evolution_Calendar_AuthenticationRequired;
 		}
-		
+		g_free(priv->username);
+		g_free(priv->password);
 		priv->username = g_strdup (username);
 		priv->password = g_strdup (password);
-		priv->need_auth = FALSE;
 	}
 	
 	if (! priv->do_offline && priv->mode == CAL_MODE_LOCAL) {
@@ -1762,14 +1880,16 @@
 	}
 
 	if (priv->mode == CAL_MODE_REMOTE) {
-		/* set forward proxy */
-		caldav_set_session_proxy (priv);
-	
-		status = caldav_server_open_calendar (cbdav);
-
-		if (status == GNOME_Evolution_Calendar_Success) {
-			priv->slave_cmd = SLAVE_SHOULD_WORK;
-			g_cond_signal (priv->cond);
+		if (priv->slave_cmd != SLAVE_SHOULD_WORK) {
+			/* set forward proxy */
+			caldav_set_session_proxy (priv);
+	
+			status = caldav_server_open_calendar (cbdav);
+
+			if (status == GNOME_Evolution_Calendar_Success) {
+				priv->slave_cmd = SLAVE_SHOULD_WORK;
+				g_cond_signal (priv->cond);
+			}	
 		}
 	} else {
 		priv->read_only = TRUE;
@@ -1806,6 +1926,15 @@
 		return status;
 	}
 
+#if 0
+	/* LOCKS NEEDED */ 
+        g_static_mutex_lock (&mutex_sync_threads);
+	if (priv->primary_slave)
+		g_hash_table_remove(caldav_sync_threads, priv->uri);
+	priv->primary_slave = FALSE;
+        g_static_mutex_unlock (&mutex_sync_threads);
+#endif	
+	
 	e_file_cache_remove (E_FILE_CACHE (priv->cache));
 	priv->cache  = NULL;
 	priv->loaded = FALSE;	
@@ -1816,6 +1945,63 @@
 	return GNOME_Evolution_Calendar_Success;
 }
 
+/* callback for icalcomponent_foreach_tzid */
+typedef struct {
+	icalcomponent *vcal_comp;
+	ECalBackendCalDAVPrivate *priv;
+	int f;
+} tz_cb_data;
+
+
+static void
+add_timezone_cb (icalparameter *param, void *data)
+{
+	const char *tzid;
+	icalcomponent *vtz_comp = NULL;
+	tz_cb_data *f_data = (tz_cb_data *) data;
+	icaltimezone *tz;
+
+	tzid = icalparameter_get_tzid (param);
+	if (!tzid)
+		return;
+	
+	/* look for timezone from local db */
+	tz = icaltimezone_get_builtin_timezone_from_tzid (tzid);
+
+	/* look from cache if not in local db ? */
+	if (!tz)
+		tz = e_cal_backend_cache_get_timezone (f_data->priv->cache, tzid);
+	
+	if (tz)
+	 	vtz_comp = icaltimezone_get_component (tz);
+	
+	/* add vtimezone component */
+	if (vtz_comp) {
+		icalcomponent_add_component (f_data->vcal_comp,
+					     icalcomponent_new_clone (vtz_comp));
+		f_data->f = TRUE;
+	}
+}
+
+static void
+add_timezones_for_component (ECalBackendCalDAVPrivate *priv,
+			     icalcomponent *vcal_comp,
+		             icalcomponent *icalcomp)
+{
+	tz_cb_data f_data = { 0 };
+
+	g_return_if_fail (vcal_comp != NULL);
+	g_return_if_fail (icalcomp != NULL);
+	
+	f_data.priv = priv;
+	f_data.vcal_comp = vcal_comp;
+	f_data.f = FALSE;
+	icalcomponent_foreach_tzid (icalcomp, add_timezone_cb, &f_data);
+	
+	if (!f_data.f) 
+		e_cal_util_add_timezones_from_component(vcal_comp,
+							icalcomp);
+}
 
 static char *
 pack_cobj (ECalBackendCalDAV *cbdav, ECalComponent *ecomp) 
@@ -1834,6 +2020,9 @@
 
 		calcomp = e_cal_util_new_top_level ();
 		cclone = icalcomponent_new_clone (icomp);
+		
+		add_timezones_for_component (priv, calcomp, cclone);
+
 		icalcomponent_add_component (calcomp, cclone);
 		e_cal_util_add_timezones_from_component(calcomp,
 							cclone);
@@ -2322,6 +2511,35 @@
 	if (status == GNOME_Evolution_Calendar_Success) {
 		/* FIXME: */
 		/* Do something usefull with the timezone */
+		
+		/* add non-existing timezone references to backend cache
+	   	   this may fail miserably if tzid-contents differ
+		 */
+        	for (iter = timezones; iter; iter = iter->next) {
+		        icalcomponent *vtz_comp = (icalcomponent *) iter->data;
+		 	icalproperty *prop;
+   			const char *tzid;
+
+			/* Get the TZID property of the first VTIMEZONE. */
+    			prop = icalcomponent_get_first_property (vtz_comp, ICAL_TZID_PROPERTY);
+    			if (!prop)
+    				continue;
+	
+			tzid = icalproperty_get_tzid (prop);
+    			if (!tzid)
+				continue;
+		
+			if (icaltimezone_get_builtin_timezone_from_tzid (tzid) == NULL) {
+				icaltimezone *zone;
+
+				zone = icaltimezone_new ();
+				icaltimezone_set_component (zone, icalcomponent_new_clone (vtz_comp));
+				e_cal_backend_cache_put_timezone (priv->cache, (const icaltimezone *) zone);
+
+				icaltimezone_free (zone, 1);
+			}
+		}
+	
 	}
 	
 	/*   */
@@ -2469,9 +2687,41 @@
 		     EDataCal        *cal,
 		     const char      *tzobj)
 {
+#if 0
 	/* FIXME: implement me! */
 	g_warning ("function not implemented %s", G_STRFUNC);
 	return GNOME_Evolution_Calendar_Success;	
+#else
+	ECalBackendCalDAV        *cbdav;
+	ECalBackendCalDAVPrivate *priv;
+	icalcomponent *tz_comp;
+	icaltimezone *zone;
+
+	cbdav = E_CAL_BACKEND_CALDAV (backend);
+	priv  = E_CAL_BACKEND_CALDAV_GET_PRIVATE (cbdav);
+
+	g_return_val_if_fail (tzobj != NULL, GNOME_Evolution_Calendar_OtherError);
+
+	tz_comp = icalparser_parse_string (tzobj);
+	if (!tz_comp)
+		return GNOME_Evolution_Calendar_InvalidObject;
+
+	if (icalcomponent_isa (tz_comp) != ICAL_VTIMEZONE_COMPONENT) {
+		icalcomponent_free (tz_comp);
+		return GNOME_Evolution_Calendar_InvalidObject;
+	}
+
+	zone = icaltimezone_new ();
+	icaltimezone_set_component (zone, tz_comp);
+
+	g_mutex_lock (priv->lock);
+	e_cal_backend_cache_put_timezone (priv->cache, zone);
+	g_mutex_unlock (priv->lock);
+
+	return GNOME_Evolution_Calendar_Success;
+
+#endif
+
 }
 
 static ECalBackendSyncStatus
diff -Naur -x '*.in' -x '*.m4' -x 'config.*' -x configure -x libtool -x stamp-h1 orig/evolution-data-server-1.12.1/calendar/libical/design-data/parameters.csv evolution-data-server-1.12.1/calendar/libical/design-data/parameters.csv
--- orig/evolution-data-server-1.12.1/calendar/libical/design-data/parameters.csv	2007-10-12 09:31:07.000000000 +0300
+++ evolution-data-server-1.12.1/calendar/libical/design-data/parameters.csv	2007-11-21 09:41:32.000000000 +0200
@@ -6,7 +6,7 @@
 "DELEGATED-TO","const char*",
 "DIR","const char*",
 "ENCODING","icalparameter_encoding","8BIT;BASE64"
-"FBTYPE","icalparameter_fbtype","FREE;BUSY;BUSYUNAVAILABLE;BUSYTENTATIVE"
+"FBTYPE","icalparameter_fbtype","FREE;BUSY;BUSY-UNAVAILABLE;BUSY-TENTATIVE"
 "FMTTYPE","const char*",
 "LANGUAGE","const char*",
 "MEMBER","const char*",
diff -Naur -x '*.in' -x '*.m4' -x 'config.*' -x configure -x libtool -x stamp-h1 orig/evolution-data-server-1.12.1/calendar/libical/src/libical/icalcomponent.c evolution-data-server-1.12.1/calendar/libical/src/libical/icalcomponent.c
--- orig/evolution-data-server-1.12.1/calendar/libical/src/libical/icalcomponent.c	2007-10-12 09:31:10.000000000 +0300
+++ evolution-data-server-1.12.1/calendar/libical/src/libical/icalcomponent.c	2007-11-21 09:41:32.000000000 +0200
@@ -281,12 +281,14 @@
     pvl_elem itr;
 
 /* WIN32 automatically adds the \r, Anybody else need it?
+   well, the spec says \r\n is a MUST
+
 #ifdef ICAL_UNIX_NEWLINE    
-*/
     char newline[] = "\n";
-/*
 #else
+*/
     char newline[] = "\r\n";
+/*    
 #endif
 */
    
@@ -825,6 +827,7 @@
 				       struct icaltimetype *dtstart,
 				       struct icaltimetype *recurtime) {
   icalproperty *exdate, *exrule;
+  pvl_elem property_iterator = comp->property_iterator;
 
   if (comp == NULL || 
       dtstart == NULL || 
@@ -842,6 +845,8 @@
 
     if (icaltime_compare(*recurtime, exdatetime) == 0) {
       /** MATCHED **/
+        
+      comp->property_iterator = property_iterator;
       return 1;
     }
   }
@@ -865,6 +870,7 @@
       result = icaltime_compare(*recurtime, exrule_time);
       if (result == 0) {
 	icalrecur_iterator_free(exrule_itr);
+        comp->property_iterator = property_iterator;
 	return 1; /** MATCH **/
       }
       if (result == 1)
@@ -873,6 +879,7 @@
 
     icalrecur_iterator_free(exrule_itr);
   }
+  comp->property_iterator = property_iterator; 
 
   return 0;  /** no matches **/
 }
diff -Naur -x '*.in' -x '*.m4' -x 'config.*' -x configure -x libtool -x stamp-h1 orig/evolution-data-server-1.12.1/calendar/libical/src/libical/icalparser.c evolution-data-server-1.12.1/calendar/libical/src/libical/icalparser.c
--- orig/evolution-data-server-1.12.1/calendar/libical/src/libical/icalparser.c	2007-10-12 09:31:10.000000000 +0300
+++ evolution-data-server-1.12.1/calendar/libical/src/libical/icalparser.c	2008-05-08 14:24:45.000000000 +0300
@@ -79,11 +79,11 @@
 #define strcasecmp    stricmp
 #endif
 
-char* icalparser_get_next_char(char c, char *str, int qm);
-char* icalparser_get_next_parameter(char* line,char** end);
-char* icalparser_get_next_value(char* line, char **end, icalvalue_kind kind);
-char* icalparser_get_prop_name(char* line, char** end);
-char* icalparser_get_param_name(char* line, char **end);
+static char* parser_get_next_char(char c, char *str, int qm);
+static char* parser_get_next_parameter(char* line,char** end);
+static char* parser_get_next_value(char* line, char **end, icalvalue_kind kind);
+static char* parser_get_prop_name(char* line, char** end);
+static char* parser_get_param_name(char* line, char **end, char **buf_value);
 
 #define TMP_BUF_SIZE 80
 
@@ -108,12 +108,17 @@
 
 char* strstrip (char *str)
 {
+	char *t;	
+
 	if (!str)
 		return NULL;
-	while (*str == ' ')
-		str = str+1;
-	while (*str && str[strlen  (str)-1] == ' ')
-		str[strlen (str)-1] = 0;
+	for (t = str; *t == ' '; t++)
+		;		
+	if (t != str)			
+		memmove(str, t, strlen(t) + 1);
+		
+	for (t = *str ? &str[strlen(str)-1] : str; *t == ' ' && t >= str; t--)
+		*t = 0;
 	return str;
 }
 
@@ -170,8 +175,8 @@
                                                 icalproperty **error);
 
 
-
-char* icalparser_get_next_char(char c, char *str, int qm)
+static
+char* parser_get_next_char(char c, char *str, int qm)
 {
     int quote_mode = 0;
     char* p;
@@ -205,8 +210,9 @@
     char *buf, *tmp;
     size_t size = (size_t)end - (size_t)start;
     
-    buf = icalmemory_tmp_buffer(size+1);
+    //buf = icalmemory_tmp_buffer(size+1);
     
+    buf = icalmemory_new_buffer(size+1);
 
     strncpy(buf,start,size);
     *(buf+size) = 0;
@@ -221,15 +227,15 @@
     return buf;
 }
 
-
-char* icalparser_get_prop_name(char* line, char** end)
+static
+char* parser_get_prop_name(char* line, char** end)
 {
     char* p;
     char* v;
     char *str;
 
-    p = icalparser_get_next_char(';',line,1); 
-    v = icalparser_get_next_char(':',line,1); 
+    p = parser_get_next_char(';',line,1); 
+    v = parser_get_next_char(':',line,1); 
     if (p== 0 && v == 0) {
 	return 0;
     }
@@ -247,14 +253,15 @@
     return str;
 }
 
-
-char* icalparser_get_param_name(char* line, char **end)
+static
+char* parser_get_param_name(char* line, char **end, char **buf)
 {
     char* next; 
     char *str;
 
-    next = icalparser_get_next_char('=',line,1);
+    next = parser_get_next_char('=',line,1);
 
+    *buf = 0;
     if (next == 0) {
 	return 0;
     }
@@ -263,24 +270,25 @@
     *end = next+1;
     if (**end == '"') {
         *end = *end+1;
-	    next = icalparser_get_next_char('"',*end,0);
+	    next = parser_get_next_char('"',*end,0);
 	    if (next == 0) {
 		    return 0;
 	    }
 
-	    *end = make_segment(*end,next);
+	    *buf = *end = make_segment(*end,next);
     }
 
     return str;
 }
 
-
-char* icalparser_get_next_paramvalue(char* line, char **end)
+#if 0
+static
+char* parser_get_next_paramvalue(char* line, char **end)
 {
     char* next; 
     char *str;
 
-    next = icalparser_get_next_char(',',line,1);
+    next = parser_get_next_char(',',line,1);
 
     if (next == 0){
 	next = (char*)(size_t)line+(size_t)strlen(line);\
@@ -294,7 +302,7 @@
 	return str;
     }
 }
-
+#endif
 
 /**
    A property may have multiple values, if the values are seperated by
@@ -302,7 +310,8 @@
    comma after line and will set the next place to start searching in
    end. */
 
-char* icalparser_get_next_value(char* line, char **end, icalvalue_kind kind)
+static 
+char* parser_get_next_value(char* line, char **end, icalvalue_kind kind)
 {
     
     char* next;
@@ -313,7 +322,7 @@
     p = line;
     while(1){
 
-	next = icalparser_get_next_char(',',p,1);
+	next = parser_get_next_char(',',p,1);
 
 	/* Unforunately, RFC2445 says that for the RECUR value, COMMA
 	   can both seperate digits in a list, and it can seperate
@@ -377,20 +386,21 @@
    
 }
 
-char* icalparser_get_next_parameter(char* line,char** end)
+static 
+char* parser_get_next_parameter(char* line,char** end)
 {
     char *next;
     char *v;
     char *str;
 
-    v = icalparser_get_next_char(':',line,1); 
-    next = icalparser_get_next_char(';', line,1);
+    v = parser_get_next_char(':',line,1); 
+    next = parser_get_next_char(';', line,1);
     
     /* There is no ';' or, it is after the ':' that marks the beginning of
        the value */
 
     if (next == 0 || next > v) {
-	next = icalparser_get_next_char(':', line,1);
+	next = parser_get_next_char(':', line,1);
     }
 
     if (next != 0) {
@@ -661,7 +671,7 @@
        a component */
 
     end = 0;
-    str = icalparser_get_prop_name(line, &end);
+    str = parser_get_prop_name(line, &end);
 
     if (str == 0 || strlen(str) == 0 ){
 	/* Could not get a property name */
@@ -674,6 +684,7 @@
 	}
 	tail = 0;
 	parser->state = ICALPARSER_ERROR;
+	icalmemory_free_buffer(str);
 	return 0; 
     }
 
@@ -688,9 +699,10 @@
 	icalcomponent *c;
         icalcomponent_kind comp_kind;
 
+	icalmemory_free_buffer(str);
 
 	parser->level++;
-	str = icalparser_get_next_value(end,&end, value_kind);
+	str = parser_get_next_value(end,&end, value_kind);
 	    
 
         comp_kind = icalenum_string_to_component_kind(str);
@@ -715,13 +727,17 @@
 	pvl_push(parser->components,c);
 
 	parser->state = ICALPARSER_BEGIN_COMP;
+
+	icalmemory_free_buffer(str);
 	return 0;
 
     } else if (strcmp(str,"END") == 0 ) {
 	icalcomponent* tail;
 
+	icalmemory_free_buffer(str);
+
 	parser->level--;
-	str = icalparser_get_next_value(end,&end, value_kind);
+	str = parser_get_next_value(end,&end, value_kind);
 
 	/* Pop last component off of list and add it to the second-to-last*/
 	parser->root_component = pvl_pop(parser->components);
@@ -733,6 +749,7 @@
 	} 
 
 	tail = 0;
+	icalmemory_free_buffer(str), str = NULL;
 
 	/* Return the component if we are back to the 0th level */
 	if (parser->level == 0){
@@ -764,6 +781,7 @@
 
     if(pvl_data(pvl_tail(parser->components)) == 0){
 	parser->state = ICALPARSER_ERROR;
+	icalmemory_free_buffer(str);
 	return 0;
     }
 
@@ -802,9 +820,12 @@
 	    
 	tail = 0;
 	parser->state = ICALPARSER_ERROR;
+	icalmemory_free_buffer(str);
 	return 0;
     }
 
+    icalmemory_free_buffer(str), str = NULL;
+
     /**********************************************************************
      * Handle parameter values
      **********************************************************************/								       
@@ -820,18 +841,19 @@
 	    break;
 	}
 
-	str = icalparser_get_next_parameter(end,&end);
+	str = parser_get_next_parameter(end,&end);
 	str = strstrip (str);
 
 	if (str != 0){
 	    char* name;
 	    char* pvalue;
+	    char *buf_value = NULL;
         
 	    icalparameter *param = 0;
 	    icalparameter_kind kind;
 	    icalcomponent *tail = pvl_data(pvl_tail(parser->components));
 
-	    name = icalparser_get_param_name(str,&pvalue);
+	    name = parser_get_param_name(str,&pvalue, &buf_value);
 
 	    if (name == 0){
 		/* 'tail' defined above */
@@ -850,10 +872,13 @@
 		    icalparameter_set_xname(param,name);
 		    icalparameter_set_xvalue(param,pvalue);
 		}
-
+		icalmemory_free_buffer(buf_value), buf_value = NULL;
 
 	    } else if (kind != ICAL_NO_PARAMETER){
 		param = icalparameter_new_from_value_string(kind,pvalue);
+
+		icalmemory_free_buffer(buf_value), buf_value = NULL;
+
 	    } else {
 		/* Error. Failed to parse the parameter*/
 		/* 'tail' defined above */
@@ -861,6 +886,10 @@
 			     ICAL_XLICERRORTYPE_PARAMETERNAMEPARSEERROR);
 		tail = 0;
 		parser->state = ICALPARSER_ERROR;
+		
+		icalmemory_free_buffer(buf_value), buf_value = NULL;
+		icalmemory_free_buffer(name), name = NULL;
+		icalmemory_free_buffer(str), str = NULL;
 		continue;
 	    }
 
@@ -871,6 +900,9 @@
 		    
 		tail = 0;
 		parser->state = ICALPARSER_ERROR;
+  	  	
+		icalmemory_free_buffer(name), name = NULL;
+  	  	icalmemory_free_buffer(str), str = NULL;
 		continue;
 	    }
 
@@ -901,13 +933,18 @@
 		    icalparameter_free(param);
 		    tail = 0;
 		    parser->state = ICALPARSER_ERROR;
+	 	    
+  		    icalmemory_free_buffer(name), name = NULL;
+	 	    icalmemory_free_buffer(str), str = NULL;
 		    continue;	
 		} 
 	    }
+	    icalmemory_free_buffer(name), name = NULL;
 
 	    /* Everything is OK, so add the parameter */
 	    icalproperty_add_parameter(prop,param);
 	    tail = 0;
+            icalmemory_free_buffer(str), str = NULL;
 
 	} else { /* if ( str != 0)  */
 	    /* If we did not get a param string, go on to looking
@@ -915,8 +952,9 @@
 	    break;
 	} /* if ( str != 0)  */
 
+ 
     } /* while(1) */	    
-	
+  	
     /**********************************************************************
      * Handle values
      **********************************************************************/								       
@@ -927,7 +965,7 @@
 
     vcount=0;
     while(1) {
-	str = icalparser_get_next_value(end,&end, value_kind);
+	str = parser_get_next_value(end,&end, value_kind);
 	str = strstrip (str);
 
 	if (str != 0){
@@ -964,13 +1002,15 @@
 		prop = 0;
 		tail = 0;
 		parser->state = ICALPARSER_ERROR;
+	
+		icalmemory_free_buffer(str), str = NULL;
 		return 0;
 		    
 	    } else {
 		vcount++;
 		icalproperty_set_value(prop, value);
 	    }
-
+ 	    icalmemory_free_buffer(str), str = NULL;
 
 	} else {
 	    if (vcount == 0){
@@ -1002,7 +1042,7 @@
     /****************************************************************
      * End of component parsing. 
      *****************************************************************/
-
+ 
     if (pvl_data(pvl_tail(parser->components)) == 0 &&
 	parser->level == 0){
 	/* HACK. Does this clause ever get executed? */
diff -Naur -x '*.in' -x '*.m4' -x 'config.*' -x configure -x libtool -x stamp-h1 orig/evolution-data-server-1.12.1/calendar/libical/src/libical/icalproperty.c evolution-data-server-1.12.1/calendar/libical/src/libical/icalproperty.c
--- orig/evolution-data-server-1.12.1/calendar/libical/src/libical/icalproperty.c	2007-10-12 09:31:10.000000000 +0300
+++ evolution-data-server-1.12.1/calendar/libical/src/libical/icalproperty.c	2007-11-21 09:41:32.000000000 +0200
@@ -183,10 +183,10 @@
 
     /* Is this a HACK or a crafty reuse of code? */
 
-    icalmemory_append_string(&buf, &buf_ptr, &buf_size, "BEGIN:VCALENDAR\n");
+    icalmemory_append_string(&buf, &buf_ptr, &buf_size, "BEGIN:VCALENDAR\r\n");
     icalmemory_append_string(&buf, &buf_ptr, &buf_size, str);
-    icalmemory_append_string(&buf, &buf_ptr, &buf_size, "\n");    
-    icalmemory_append_string(&buf, &buf_ptr, &buf_size, "END:VCALENDAR\n");
+    icalmemory_append_string(&buf, &buf_ptr, &buf_size, "\r\n");    
+    icalmemory_append_string(&buf, &buf_ptr, &buf_size, "END:VCALENDAR\r\n");
 
     comp = icalparser_parse_string(buf);
 
@@ -341,7 +341,7 @@
 	/* If this isn't the first line, we need to output a newline and space
 	   first. */
 	if (!first_line) {
-	    icalmemory_append_string (&buf, &buf_ptr, &buf_size, "\n ");
+	    icalmemory_append_string (&buf, &buf_ptr, &buf_size, "\r\n ");
 	}
 	first_line = 0;
 
@@ -433,7 +433,7 @@
     char *out_buf;
     const char* kind_string = 0;
 
-    char newline[] = "\n";
+    char newline[] = "\r\n";
 
     
     icalerror_check_arg_rz( (prop!=0),"prop");
